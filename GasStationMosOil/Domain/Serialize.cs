using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Data;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Xml.Linq;
using System.Xml.Serialization;
using GasolineMosOil.Data;
using GasolineMosOil.Model;
using GasolineMosOil.ViewModel;

namespace GasolineMosOil.Domain;

public static class Serialize
{
    public static void UpdateGoodsFile(ObservableCollection<ShoppingCartItem> receiptItems, int idOrder)
    {
        GasStationMosOil.DB db = new GasStationMosOil.DB();
        var goodsLines = File.ReadAllLines(Deserialize.CsvFileDefault + "Goods.csv").ToList();

        // Loop through each item in the ReceiptItems collection
        foreach (var item in receiptItems)
        {
            db.addToBucketProduct(item.Id, item.Count, idOrder);
            db.deleteCountOfProduct(item.Id, item.Count);
        }

 
    }

    public static void UpdateTanksFile(NozzlePostViewModel selectedNozzlePostInstance)
    {
        string[] lines = File.ReadAllLines(Deserialize.CsvFileDefault + "Tanks.csv");
        string[]? fields = lines
            .FirstOrDefault(line => line.Split(';')[0] == selectedNozzlePostInstance.SelectedFuelId.ToString())
            ?.Split(';');

        // If the row was found, update the "Reserve" field with the new value
        if (fields != null)
        {
            fields[2] = (double.Parse(fields[2], CultureInfo.InvariantCulture) - selectedNozzlePostInstance.LiterCount)
                .ToString(CultureInfo.InvariantCulture);
            lines[Array.IndexOf(lines, lines.FirstOrDefault(line => line.Split(';')[0] == fields[0]))] =
                string.Join(";", fields);

            // Write the updated contents back to the "Tanks.csv" file
            File.WriteAllLines(Deserialize.CsvFileDefault + "Tanks.csv", lines);
        }
    }

    public static void WriteDataTableToCsvWithAutoGeneratedId(DataTable dataTable, string filePath)
    {
        // Create a string builder to store the CSV data
        StringBuilder csvBuilder = new StringBuilder();
        csvBuilder.AppendLine(
            string.Join(";", dataTable.Columns.Cast<DataColumn>().Select(column => column.ColumnName)));

        // Add the rows to the CSV
        int id = 0;
        foreach (DataRow row in dataTable.Rows)
        {
            row["ID"] = id;
            id++;
            csvBuilder.AppendLine(string.Join(";", row.ItemArray));
        }

        // Write the CSV to the file
        File.WriteAllText(Deserialize.CsvFileDefault + filePath, csvBuilder.ToString());
    }


    public static void WriteDataTableToCsv(DataTable dataTable, string filePath)
    {
        // Create a string builder to store the CSV data
        StringBuilder csvBuilder = new StringBuilder();
        csvBuilder.AppendLine(
            string.Join(";", dataTable.Columns.Cast<DataColumn>().Select(column => column.ColumnName)));

        foreach (DataRow row in dataTable.Rows)
        {
            csvBuilder.AppendLine(string.Join(";", row.ItemArray));
        }

        // Write the CSV to the file
        File.WriteAllText(Deserialize.CsvFileDefault + filePath, csvBuilder.ToString());
    }

    public static void SerializeNozzlePostCount(int nozzlePostCount)
    {
        XDocument doc = XDocument.Load(Deserialize.CsvFileDefault + "Configuration.xml");
        if (doc.Root != null)
        {
            XElement nozzlePostCountElement =
                doc.Root.Element("NozzlePostCount") ?? throw new InvalidOperationException();
            nozzlePostCountElement.Value = nozzlePostCount.ToString();
        }
        else
        {
            throw new InvalidOperationException();
        }

        doc.Save(Deserialize.CsvFileDefault + "Configuration.xml");
    }


    public static void SerializeUsers(List<UsersData.User> users)
    {
        var fileName = Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location) + @"\Assets\Users.xml";
        var xmlSerializer = new XmlSerializer(typeof(List<UsersData.User>), new XmlRootAttribute("Users"));

        using var stream = new StreamWriter(fileName);
        var xmlNamespace = new XmlSerializerNamespaces();
        xmlNamespace.Add("", "");
        xmlSerializer.Serialize(stream, users, xmlNamespace);
    }

    public static void SerializeConfiguration(ConfigurationData configuration)
    {
        var fileName = Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location) + @"\Assets\Configuration.xml";
        var xmlSerializer = new XmlSerializer(typeof(ConfigurationData), new XmlRootAttribute("Configuration"));

        using var stream = new StreamWriter(fileName);
        var xmlNamespace = new XmlSerializerNamespaces();
        xmlNamespace.Add("", "");
        xmlSerializer.Serialize(stream, configuration, xmlNamespace);
    }
}